// <auto-generated />
using System;
using AdSite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdSite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190228110731_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("adsite")
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdSite.Models.ApplicationIdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("AdSite.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.Ad", b =>
                {
                    b.Property<Guid>("AdID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryID");

                    b.Property<Guid>("CityID");

                    b.Property<Guid>("CountryID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OwnerId");

                    b.Property<decimal>("Price");

                    b.HasKey("AdID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CityID");

                    b.HasIndex("CountryID");

                    b.HasIndex("OwnerId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.AdDetail", b =>
                {
                    b.Property<Guid>("AdDetailID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AdID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.HasKey("AdDetailID");

                    b.HasIndex("AdID")
                        .IsUnique();

                    b.ToTable("AdDetails");
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.AdDetailPicture", b =>
                {
                    b.Property<Guid>("AdDetailPictureID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AdDetailID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.HasKey("AdDetailPictureID");

                    b.HasIndex("AdDetailID");

                    b.ToTable("AdDetailPictures");
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("ParentCategoryId");

                    b.HasKey("CategoryID");

                    b.HasIndex("CountryId");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("CategoryID", "ParentCategoryId")
                        .IsUnique()
                        .HasFilter("[ParentCategoryId] IS NOT NULL");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.City", b =>
                {
                    b.Property<Guid>("CityID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Postcode")
                        .IsRequired();

                    b.HasKey("CityID");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.Country", b =>
                {
                    b.Property<Guid>("CountryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.Localization", b =>
                {
                    b.Property<Guid>("LocalizationID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Albanian");

                    b.Property<Guid?>("CountryID");

                    b.Property<string>("English");

                    b.Property<string>("LocalizationKey")
                        .IsRequired();

                    b.Property<string>("Macedonian");

                    b.HasKey("LocalizationID");

                    b.HasIndex("CountryID");

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.UserRoleCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationIdentityRoleId");

                    b.Property<string>("ApplicationUserId");

                    b.Property<Guid>("CountryId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationIdentityRoleId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CountryId");

                    b.ToTable("UserRoleCountry");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.Ad", b =>
                {
                    b.HasOne("AdSite.Models.DatabaseModels.Category", "Category")
                        .WithMany("Ads")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdSite.Models.DatabaseModels.City", "City")
                        .WithMany("Ads")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdSite.Models.DatabaseModels.Country", "Country")
                        .WithMany("Ads")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdSite.Models.ApplicationUser", "Owner")
                        .WithMany("Ads")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.AdDetail", b =>
                {
                    b.HasOne("AdSite.Models.DatabaseModels.Ad", "Ad")
                        .WithOne("AdDetail")
                        .HasForeignKey("AdSite.Models.DatabaseModels.AdDetail", "AdID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.AdDetailPicture", b =>
                {
                    b.HasOne("AdSite.Models.DatabaseModels.AdDetail", "AdDetail")
                        .WithMany("AdDetailPictures")
                        .HasForeignKey("AdDetailID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.Category", b =>
                {
                    b.HasOne("AdSite.Models.DatabaseModels.Country", "Country")
                        .WithMany("Categories")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdSite.Models.DatabaseModels.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentCategoryId");
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.City", b =>
                {
                    b.HasOne("AdSite.Models.DatabaseModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.Localization", b =>
                {
                    b.HasOne("AdSite.Models.DatabaseModels.Country")
                        .WithMany("Localizations")
                        .HasForeignKey("CountryID");
                });

            modelBuilder.Entity("AdSite.Models.DatabaseModels.UserRoleCountry", b =>
                {
                    b.HasOne("AdSite.Models.ApplicationIdentityRole", "ApplicationIdentityRole")
                        .WithMany("UserRoleCountry")
                        .HasForeignKey("ApplicationIdentityRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AdSite.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRoleCountry")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AdSite.Models.DatabaseModels.Country", "Country")
                        .WithMany("UserRoleCountry")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("AdSite.Models.ApplicationIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AdSite.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AdSite.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("AdSite.Models.ApplicationIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AdSite.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AdSite.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
